10 match从字符串开始位置匹配
----------------------------

| 注意\ ``match``,\ ``search``\ 等的不同：
| 1) match函数

.. code:: python

   import re
   ### match
   mystr = 'This'
   pat = re.compile('hi')
   pat.match(mystr) # None
   pat.match(mystr,1) # 从位置1处开始匹配
   Out[90]: <re.Match object; span=(1, 3), match='hi'>

| 2) search函数
| search是从字符串的任意位置开始匹配

.. code:: python

   In [91]: mystr = 'This'
       ...: pat = re.compile('hi')
       ...: pat.search(mystr)
   Out[91]: <re.Match object; span=(1, 3), match='hi'>

.. _header-n1873:

11 替换匹配的子串
-----------------

``sub``\ 函数实现对匹配子串的替换

.. code:: python

   content="hello 12345, hello 456321"    
   pat=re.compile(r'\d+') #要替换的部分
   m=pat.sub("666",content)
   print(m) # hello 666, hello 666

.. _header-n1876:

12 贪心捕获
-----------

(.*)表示捕获任意多个字符，尽可能多的匹配字符

.. code:: python

   content='<h>ddedadsad</h><div>graph</div>bb<div>math</div>cc'
   pat=re.compile(r"<div>(.*)</div>")  #贪婪模式
   m=pat.findall(content)
   print(m) #匹配结果为： ['graph</div>bb<div>math']

.. _header-n1879:

13 非贪心捕获
-------------

仅添加一个问号(\ ``?``)，得到结果完全不同，这是非贪心匹配，通过这个例子体会贪心和非贪心的匹配的不同。

.. code:: python

   content='<h>ddedadsad</h><div>graph</div>bb<div>math</div>cc'
   pat=re.compile(r"<div>(.*?)</div>")
   m=pat.findall(content)
   print(m) # ['graph', 'math']

非贪心捕获，见好就收。

.. _header-n1883:

14 常用元字符总结
-----------------

.. code:: 

   . 匹配任意字符  
   ^ 匹配字符串开始位置 
   $ 匹配字符串中结束的位置 
   * 前面的原子重复0次、1次、多次 
   ? 前面的原子重复0次或者1次 
   + 前面的原子重复1次或多次
   {n} 前面的原子出现了 n 次
   {n,} 前面的原子至少出现 n 次
   {n,m} 前面的原子出现次数介于 n-m 之间
   ( ) 分组,需要输出的部分

.. _header-n1885:

15 常用通用字符总结
-------------------

.. code:: 

   \s  匹配空白字符 
   \w  匹配任意字母/数字/下划线 
   \W  和小写 w 相反，匹配任意字母/数字/下划线以外的字符
   \d  匹配十进制数字
   \D  匹配除了十进制数以外的值 
   [0-9]  匹配一个0-9之间的数字
   [a-z]  匹配小写英文字母
   [A-Z]  匹配大写英文字母

.. _header-n1887:

16 密码安全检查
---------------

密码安全要求：1)要求密码为6到20位; 2)密码只包含英文字母和数字

.. code:: python

   pat = re.compile(r'\w{6,20}') # 这是错误的，因为\w通配符匹配的是字母，数字和下划线，题目要求不能含有下划线
   # 使用最稳的方法：\da-zA-Z满足`密码只包含英文字母和数字`
   pat = re.compile(r'[\da-zA-Z]{6,20}')

选用最保险的\ ``fullmatch``\ 方法，查看是否整个字符串都匹配：

.. code:: python

   pat.fullmatch('qaz12') # 返回 None, 长度小于6
   pat.fullmatch('qaz12wsxedcrfvtgb67890942234343434') # None 长度大于22
   pat.fullmatch('qaz_231') # None 含有下划线
   pat.fullmatch('n0passw0Rd')
   Out[4]: <re.Match object; span=(0, 10), match='n0passw0Rd'>

.. _header-n1892:
